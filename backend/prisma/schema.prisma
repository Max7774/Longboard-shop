generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  email      String    @unique
  password   String

  name       String    @unique
  avatarPath String    @default("/uploads/default-avatar.png") @map("avatar_path")

  phone      String    @default("")

  orders     Order[]
  favourites Product[]
  reviews    Review[]
}

model Product {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  name        String      @unique
  slug        String      @unique
  description String
  price       Int
  images      String[]
  categoryId  Int?        @map("category_id")
  userId      Int?         @map("user_id")
  orderItems  OrderItem[]
  category    Category?   @relation(fields: [categoryId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])
  reviews     Review[]
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  name      String    @unique
  slug      String    @unique
  products  Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int
  text      String
  userId    Int      @map("user_id")
  productId Int?     @map("product_id")
  product   Product? @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id        Int                 @id @default(autoincrement())
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")
  status    EnumOrderItemStatus @default(Pending)
  userId    Int                 @map("user_id")
  user      User                @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total Int
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  quantity  Int
  price     Int
  orderId   Int?     @map("order_id")
  productId Int      @map("product_id")
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum EnumOrderItemStatus {
  Pending
  Payed
  Shipped
  Delivered
}
